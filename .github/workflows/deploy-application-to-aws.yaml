name: Deploy Application to AWS

on:
  push:
    branches:
      - main

env:
    AWS_REGION:  ${{ secrets.AWS_REGION }} 
    AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}       
    AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}                    
    ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}       
    ECS_SERVICE: ${{ secrets.ECS_SERVICE_NAME }}                
    ECS_CLUSTER: ${{ secrets.ECS_CLUSTER_NAME }}               
    ECS_TASK_DEFINITION: ${{ secrets.ECS_TASK_DEFINITION }}
    ECS_CONTAINER_NAME: ${{ secrets.ECS_CONTAINER_NAME }}  
    S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}  
    CLOUDFRONT_DISTRIBUTION_ID: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}                               
          
jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    # frontend deployment
    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '20'

    - name: Install Angular Cli
      working-directory: client
      run: npm install -g @angular/cli@17

    - name: Install dependencies and builder angular app
      run: |
          cd client
          npm install
          ng build --configuration production

    # Deploy statische files naar S3 bucket
    - name: Deploy to S3
      env:
        AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ env.AWS_REGION }}
        S3_BUCKET_NAME: ${{ env.S3_BUCKET_NAME }}
      run: |
        npm install -g aws-cli
        aws s3 sync ./dist/client/browser/ s3://$S3_BUCKET_NAME --delete
      working-directory: client

    # Invalideer de cache met statische files van de Cloudfront distributie
    - name: Invalidate CloudFront Cache
      env:
        AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ env.AWS_REGION }}
        CLOUDFRONT_DISTRIBUTION_ID: ${{ env.CLOUDFRONT_DISTRIBUTION_ID }}

      run: |
        aws cloudfront create-invalidation --distribution-id $CLOUDFRONT_DISTRIBUTION_ID --paths "/*"

    # Backend deployment
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
  
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a
  
    # Push de docker image naar ECR
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd API
        docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    # Maak een nieuwe task definition voor ECS    
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@c804dfbdd57f713b6c079302a4c01db7017a36fc
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.ECS_CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    # Update de service om de nieuwe task definitie te gebruiken en deploy de containers
    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@df9643053eda01f169e64a0e60233aacca83799a
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true

